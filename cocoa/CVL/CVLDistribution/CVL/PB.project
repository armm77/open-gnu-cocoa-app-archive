{
    APPCLASS = NSApplication; 
    DYNAMIC_CODE_GEN = YES; 
    English_RESOURCES = {}; 
    FILESTABLE = {
        BUNDLES = (); 
        CLASSES = (
            BrowserController.m, 
            CVLDelegate.m, 
            CVLFile.m, 
            CVLFileEnumerator.m, 
            CVLScheduler.m, 
            CVLTextView.m, 
            DirectoryContentsFilter.m, 
            DirectoryContentsFilterProvider.m, 
            "NSArray+CVLUtilities.m", 
            NSArray.SenCategorize.m, 
            NSArray.SenUtilities.m, 
            NSFileManager.MkDirs.m, 
            NSFileManager_CVS.m, 
            "NSString+CVL.m", 
            NSString.GentleCompare.m, 
            ProgressPanelController.m, 
            RestorePanelController.m, 
            ResultsRepository.m, 
            RetrievePanelController.m, 
            WorkAreaListViewer.m, 
            WorkAreaViewer.m
        ); 
        English_INTERFACES = (
            CvsCommitPanel.nib, 
            CvsPserverLogin.nib, 
            CvsTagPanel.nib, 
            "EasyCVS-windows.nib", 
            EasyCVS.nib, 
            EasyCVSBrowser.nib, 
            EasyCVSListViewer.nib, 
            ProgressPanel.nib, 
            RestorePanel.nib, 
            RetrievePanel.nib, 
            WorkAreaViewer.nib
        ); 
        English_OTHER_RESOURCES = (CVL.rtfd); 
        FRAMEWORKS = (
            AppKit.framework, 
            Foundation.framework, 
            SenFoundation.framework, 
            SenOyster.framework, 
            SenTestingKit.framework, 
            System.framework
        ); 
        FRAMEWORKSEARCH = (
            "$(USER_LIBRARY_DIR)/Frameworks", 
            "$(NEXT_ROOT)$(LOCAL_LIBRARY_DIR)/Frameworks"
        ); 
        HEADERSEARCH = (); 
        HELP_RESOURCES = (); 
        H_FILES = (
            BrowserController.h, 
            CVLDelegate.h, 
            CVLFile.h, 
            CVLFileEnumerator.h, 
            CVLScheduler.h, 
            CVLTextView.h, 
            DirectoryContentsFilter.h, 
            DirectoryContentsFilterProvider.h, 
            "NSArray+CVLUtilities.h", 
            NSArray.SenCategorize.h, 
            NSArray.SenUtilities.h, 
            NSFileManager.MkDirs.h, 
            NSFileManager_CVS.h, 
            "NSString+CVL.h", 
            NSString.GentleCompare.h, 
            ProgressPanelController.h, 
            RestorePanelController.h, 
            ResultsRepository.h, 
            RetrievePanelController.h, 
            WorkAreaListViewer.h, 
            WorkAreaViewer.h
        ); 
        IMAGES = (
            appicon.ico, 
            appicon.tiff, 
            blackPoint.tiff, 
            check.tiff, 
            elipsis.tiff, 
            locallyAdded.tiff, 
            locallyModified.tiff, 
            minus.tiff, 
            multiple.tiff, 
            needsPatch.tiff, 
            needsUpdate.tiff, 
            notLeaf.tiff, 
            plus.tiff, 
            questionMark.tiff, 
            Sente_70.eps, 
            star.tiff, 
            times.tiff, 
            triangle.tiff, 
            unknown.tiff, 
            upToDate.tiff
        ); 
        INTERFACES = (); 
        LIBRARYSEARCH = (); 
        LIBS = (); 
        OTHER_LIBS = (); 
        OTHER_LINKED = (CVL_main.m); 
        OTHER_RESOURCES = (Panels.plist, RepositoryClasses.plist, statusImages.table); 
        OTHER_SOURCES = (
            CustomInfo.plist, 
            h.template, 
            HowToBuildCVL.txt, 
            m.template, 
            Makefile, 
            Makefile.postamble, 
            Makefile.preamble, 
            OpenSourceLicense.html
        ); 
        PRECOMPILED_HEADERS = (); 
        PROJECT_HEADERS = (
            CVLDelegate.h, 
            CVLFile.h, 
            NSFileManager.MkDirs.h, 
            NSFileManager_CVS.h, 
            ResultsRepository.h, 
            "NSString+CVL.h"
        ); 
        PUBLIC_HEADERS = (); 
        SUBPROJECTS = (
            Comparator.subproj, 
            CVLConsole.subproj, 
            cvlEditor.tproj, 
            InfoPanel.subproj, 
            Inspector.subproj, 
            Modules.subproj, 
            Preferences.subproj, 
            Repositories.subproj, 
            RepositoryViewer.subproj, 
            Requests.subproj, 
            SenFoundationCVLCandidates.subproj, 
            SenInterface.subproj, 
            SenPanels.subproj, 
            TextFinder.subproj
        ); 
        TOOLS = (); 
    }; 
    LANGUAGE = English; 
    MAKEFILEDIR = "$(MAKEFILEPATH)/pb_makefiles"; 
    NEXTSTEP_APPICON = appicon.tiff; 
    NEXTSTEP_BUILDDIR = "$(LOCAL_DEVELOPER_DIR)/Builds/$(USER)/$(NAME)"; 
    NEXTSTEP_BUILDTOOL = /bin/gnumake; 
    NEXTSTEP_DOCUMENTEXTENSIONS = (); 
    NEXTSTEP_HELPFILE = CVL.rtfd; 
    NEXTSTEP_INSTALLDIR = /Applications; 
    NEXTSTEP_JAVA_COMPILER = /usr/bin/javac; 
    NEXTSTEP_MAINNIB = EasyCVS; 
    NEXTSTEP_OBJCPLUS_COMPILER = /usr/bin/cc; 
    PDO_UNIX_BUILDTOOL = $NEXT_ROOT/Developer/bin/make; 
    PDO_UNIX_JAVA_COMPILER = "$(NEXTDEV_BIN)/javac"; 
    PDO_UNIX_OBJCPLUS_COMPILER = "$(NEXTDEV_BIN)/gcc"; 
    PROJECTNAME = CVL; 
    PROJECTTYPE = Application; 
    PROJECTVERSION = 2.8; 
    TARGETS = (depend); 
    WINDOWS_APPICON = appicon.ico; 
    WINDOWS_BUILDDIR = "$(NEXT_ROOT)/$(LOCAL_DEVELOPER_DIR)/Builds/$(USER)/$(NAME)"; 
    WINDOWS_BUILDTOOL = $NEXT_ROOT/Developer/Executables/make; 
    WINDOWS_DOCUMENTEXTENSIONS = (); 
    WINDOWS_INSTALLDIR = /Applications; 
    WINDOWS_JAVA_COMPILER = "$(JDKBINDIR)/javac.exe"; 
    WINDOWS_MAINNIB = "EasyCVS-windows"; 
    WINDOWS_OBJCPLUS_COMPILER = "$(DEVDIR)/gcc"; 
}
